/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"BlockTrempNFT","desc":"","methods":[{"name":"createCertificate","desc":"This method mints the certificate ASA for the user and\nreturns the ASA ID.","args":[{"name":"ipfsHash","type":"string","desc":"The hash for the certificate."},{"name":"mbrPayment","type":"pay","desc":"Payment for the minimum balance requirement for the\nbox storage where a reference to the ASA would be persisted in."}],"returns":{"type":"uint64","desc":"The ID of the asset."},"actions":{"create":[],"call":["NoOp"]}},{"name":"claimCertificate","args":[{"name":"ipfsHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{"Metadata":[{"name":"asaId","type":"uint64"},{"name":"address","type":"address"}]},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"certificateBoxes":{"keyType":"AVMBytes","valueType":"Metadata"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[0]},{"teal":2,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[1,2,3,4,5]},{"teal":3,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[6,7,8]},{"teal":15,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[9,10]},{"teal":16,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[11]},{"teal":17,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[12,13]},{"teal":18,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[14]},{"teal":19,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[15,16]},{"teal":20,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[17]},{"teal":21,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]},{"teal":25,"source":"contracts/BlockTrempNFT.algo.ts:22","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[44]},{"teal":30,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[45,46,47,48,49,50]},{"teal":33,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[51,52]},{"teal":34,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[53]},{"teal":35,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[54]},{"teal":36,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[55]},{"teal":37,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[56,57]},{"teal":38,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[58]},{"teal":39,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[59]},{"teal":42,"source":"contracts/BlockTrempNFT.algo.ts:34","errorMessage":"argument 0 (mbrPayment) for createCertificate must be a pay transaction","pc":[60]},{"teal":45,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[61,62,63]},{"teal":46,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[64,65,66]},{"teal":49,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[67,68,69]},{"teal":50,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[70]},{"teal":51,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[71]},{"teal":52,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[72]},{"teal":53,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[73]},{"teal":54,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[74]},{"teal":65,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[75,76,77]},{"teal":68,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[78]},{"teal":69,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[79,80]},{"teal":73,"source":"contracts/BlockTrempNFT.algo.ts:35","pc":[81,82]},{"teal":74,"source":"contracts/BlockTrempNFT.algo.ts:35","pc":[83]},{"teal":75,"source":"contracts/BlockTrempNFT.algo.ts:35","pc":[84]},{"teal":76,"source":"contracts/BlockTrempNFT.algo.ts:35","pc":[85]},{"teal":77,"source":"contracts/BlockTrempNFT.algo.ts:35","pc":[86]},{"teal":78,"source":"contracts/BlockTrempNFT.algo.ts:35","pc":[87]},{"teal":82,"source":"contracts/BlockTrempNFT.algo.ts:37","pc":[88,89,90,91]},{"teal":83,"source":"contracts/BlockTrempNFT.algo.ts:37","pc":[92,93]},{"teal":87,"source":"contracts/BlockTrempNFT.algo.ts:39","pc":[94,95]},{"teal":88,"source":"contracts/BlockTrempNFT.algo.ts:39","pc":[96,97]},{"teal":89,"source":"contracts/BlockTrempNFT.algo.ts:39","pc":[98,99]},{"teal":90,"source":"contracts/BlockTrempNFT.algo.ts:39","pc":[100]},{"teal":91,"source":"contracts/BlockTrempNFT.algo.ts:39","pc":[101]},{"teal":95,"source":"contracts/BlockTrempNFT.algo.ts:40","pc":[102,103]},{"teal":96,"source":"contracts/BlockTrempNFT.algo.ts:40","pc":[104,105]},{"teal":97,"source":"contracts/BlockTrempNFT.algo.ts:40","pc":[106,107]},{"teal":98,"source":"contracts/BlockTrempNFT.algo.ts:40","pc":[108]},{"teal":99,"source":"contracts/BlockTrempNFT.algo.ts:40","pc":[109]},{"teal":103,"source":"contracts/BlockTrempNFT.algo.ts:41","pc":[110,111]},{"teal":104,"source":"contracts/BlockTrempNFT.algo.ts:41","pc":[112,113]},{"teal":105,"source":"contracts/BlockTrempNFT.algo.ts:41","pc":[114,115]},{"teal":106,"source":"contracts/BlockTrempNFT.algo.ts:41","pc":[116]},{"teal":107,"source":"contracts/BlockTrempNFT.algo.ts:41","pc":[117]},{"teal":111,"source":"contracts/BlockTrempNFT.algo.ts:44","pc":[118,119,120,121,122,123,124,125,126]},{"teal":112,"source":"contracts/BlockTrempNFT.algo.ts:44","pc":[127,128]},{"teal":113,"source":"contracts/BlockTrempNFT.algo.ts:44","pc":[129]},{"teal":114,"source":"contracts/BlockTrempNFT.algo.ts:44","pc":[130,131]},{"teal":124,"source":"contracts/BlockTrempNFT.algo.ts:46","pc":[132]},{"teal":125,"source":"contracts/BlockTrempNFT.algo.ts:46","pc":[133,134]},{"teal":126,"source":"contracts/BlockTrempNFT.algo.ts:46","pc":[135,136]},{"teal":130,"source":"contracts/BlockTrempNFT.algo.ts:47","pc":[137]},{"teal":131,"source":"contracts/BlockTrempNFT.algo.ts:47","pc":[138,139]},{"teal":135,"source":"contracts/BlockTrempNFT.algo.ts:48","pc":[140]},{"teal":136,"source":"contracts/BlockTrempNFT.algo.ts:48","pc":[141,142]},{"teal":140,"source":"contracts/BlockTrempNFT.algo.ts:49","pc":[143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166]},{"teal":141,"source":"contracts/BlockTrempNFT.algo.ts:49","pc":[167,168]},{"teal":145,"source":"contracts/BlockTrempNFT.algo.ts:50","pc":[169,170,171,172,173,174,175]},{"teal":146,"source":"contracts/BlockTrempNFT.algo.ts:50","pc":[176,177]},{"teal":150,"source":"contracts/BlockTrempNFT.algo.ts:51","pc":[178,179]},{"teal":151,"source":"contracts/BlockTrempNFT.algo.ts:51","pc":[180,181]},{"teal":154,"source":"contracts/BlockTrempNFT.algo.ts:46","pc":[182]},{"teal":155,"source":"contracts/BlockTrempNFT.algo.ts:46","pc":[183,184]},{"teal":158,"source":"contracts/BlockTrempNFT.algo.ts:46","pc":[185]},{"teal":159,"source":"contracts/BlockTrempNFT.algo.ts:46","pc":[186,187]},{"teal":160,"source":"contracts/BlockTrempNFT.algo.ts:46","pc":[188,189]},{"teal":167,"source":"contracts/BlockTrempNFT.algo.ts:55","pc":[190,191]},{"teal":168,"source":"contracts/BlockTrempNFT.algo.ts:55","pc":[192]},{"teal":169,"source":"contracts/BlockTrempNFT.algo.ts:56","pc":[193,194]},{"teal":170,"source":"contracts/BlockTrempNFT.algo.ts:56","pc":[195]},{"teal":171,"source":"contracts/BlockTrempNFT.algo.ts:54","pc":[196,197]},{"teal":175,"source":"contracts/BlockTrempNFT.algo.ts:59","pc":[198,199]},{"teal":176,"source":"contracts/BlockTrempNFT.algo.ts:59","pc":[200,201]},{"teal":177,"source":"contracts/BlockTrempNFT.algo.ts:59","pc":[202]},{"teal":181,"source":"contracts/BlockTrempNFT.algo.ts:61","pc":[203,204]},{"teal":184,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[205,206]},{"teal":187,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[207,208]},{"teal":188,"source":"contracts/BlockTrempNFT.algo.ts:34","pc":[209]},{"teal":193,"source":"contracts/BlockTrempNFT.algo.ts:64","pc":[210,211,212]},{"teal":194,"source":"contracts/BlockTrempNFT.algo.ts:64","pc":[213,214,215]},{"teal":197,"source":"contracts/BlockTrempNFT.algo.ts:64","pc":[216,217,218]},{"teal":198,"source":"contracts/BlockTrempNFT.algo.ts:64","pc":[219]},{"teal":199,"source":"contracts/BlockTrempNFT.algo.ts:64","pc":[220]},{"teal":203,"source":"contracts/BlockTrempNFT.algo.ts:64","pc":[221,222,223]},{"teal":206,"source":"contracts/BlockTrempNFT.algo.ts:64","pc":[224]},{"teal":210,"source":"contracts/BlockTrempNFT.algo.ts:65","pc":[225,226]},{"teal":211,"source":"contracts/BlockTrempNFT.algo.ts:65","pc":[227]},{"teal":212,"source":"contracts/BlockTrempNFT.algo.ts:65","pc":[228]},{"teal":213,"source":"contracts/BlockTrempNFT.algo.ts:65","pc":[229]},{"teal":214,"source":"contracts/BlockTrempNFT.algo.ts:65","pc":[230]},{"teal":218,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[231,232]},{"teal":219,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[233,234]},{"teal":223,"source":"contracts/BlockTrempNFT.algo.ts:70","pc":[235,236]},{"teal":224,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[237,238]},{"teal":225,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[239]},{"teal":226,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[240]},{"teal":227,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[241]},{"teal":228,"source":"contracts/BlockTrempNFT.algo.ts:70","pc":[242]},{"teal":229,"source":"contracts/BlockTrempNFT.algo.ts:70","pc":[243,244]},{"teal":230,"source":"contracts/BlockTrempNFT.algo.ts:70","pc":[245]},{"teal":231,"source":"contracts/BlockTrempNFT.algo.ts:70","pc":[246]},{"teal":232,"source":"contracts/BlockTrempNFT.algo.ts:70","pc":[247]},{"teal":233,"source":"contracts/BlockTrempNFT.algo.ts:70","pc":[248]},{"teal":241,"source":"contracts/BlockTrempNFT.algo.ts:72","pc":[249]},{"teal":242,"source":"contracts/BlockTrempNFT.algo.ts:72","pc":[250,251]},{"teal":243,"source":"contracts/BlockTrempNFT.algo.ts:72","pc":[252,253]},{"teal":247,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[254,255]},{"teal":248,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[256]},{"teal":249,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[257,258]},{"teal":250,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[259]},{"teal":251,"source":"contracts/BlockTrempNFT.algo.ts:73","pc":[260,261]},{"teal":255,"source":"contracts/BlockTrempNFT.algo.ts:74","pc":[262]},{"teal":256,"source":"contracts/BlockTrempNFT.algo.ts:74","pc":[263,264]},{"teal":260,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[265,266]},{"teal":261,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[267]},{"teal":262,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[268]},{"teal":263,"source":"contracts/BlockTrempNFT.algo.ts:67","pc":[269]},{"teal":264,"source":"contracts/BlockTrempNFT.algo.ts:75","pc":[270]},{"teal":265,"source":"contracts/BlockTrempNFT.algo.ts:75","pc":[271,272]},{"teal":268,"source":"contracts/BlockTrempNFT.algo.ts:72","pc":[273]},{"teal":269,"source":"contracts/BlockTrempNFT.algo.ts:72","pc":[274,275]},{"teal":272,"source":"contracts/BlockTrempNFT.algo.ts:72","pc":[276]},{"teal":273,"source":"contracts/BlockTrempNFT.algo.ts:64","pc":[277]},{"teal":276,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[278]},{"teal":277,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[279]},{"teal":280,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[280,281,282,283,284,285]},{"teal":281,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[286,287,288]},{"teal":282,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[289,290,291,292]},{"teal":285,"source":"contracts/BlockTrempNFT.algo.ts:22","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[293]},{"teal":288,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[294,295,296,297,298,299]},{"teal":289,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[300,301,302,303,304,305]},{"teal":290,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[306,307,308]},{"teal":291,"source":"contracts/BlockTrempNFT.algo.ts:22","pc":[309,310,311,312,313,314]},{"teal":294,"source":"contracts/BlockTrempNFT.algo.ts:22","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[315]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiADAQAIJgEAMRgUgQYLMRkIjQwA+gAAAAAAAAAAAAAA7AAAAAAAAAAAAAAAgAQVH3x1MRYiCUk4ECISRDYaAVcCAIgABRZQsCJDigIBKEcDi/+9TEgURIHksAmMAIv+OAiLAA9Ei/44BzIKEkSL/jgAMQASRIAHaXBmczovL4v/UIwBsYEDshAisiIjsiOAFkJsb2NrdHJlbXAgQ2VydGlmaWNhdGWyJoAFQkNFUlSyJYsBsicjsgGztDyMAosCFjEAUIwDi/+LA7+LAowARgOJNhoBVwIAiAACIkOKAQAoi/+9TEhEi/+MADIKi/8jJLoXcABIIhJEsYEEshCL/ySBILqyFCKyEov/IyS6F7IRI7IBs4kiQ4AEuER7NjYaAI4B//EAgAQ9zRRdgATmaq7mNhoAjgL+8v+XAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Metadata = {
  asaId: bigint,
  address: string
}


/**
 * Converts the ABI tuple representation of a Metadata to the struct representation
 */
export function MetadataFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Metadata, APP_SPEC.structs) as Metadata
}

/**
 * The argument types for the BlockTrempNft contract
 */
export type BlockTrempNftArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createCertificate(string,pay)uint64': {
      /**
       * The hash for the certificate.
       */
      ipfsHash: string
      /**
      * Payment for the minimum balance requirement for the
      box storage where a reference to the ASA would be persisted in.

       */
      mbrPayment: AppMethodCallTransactionArgument
    }
    'claimCertificate(string)void': {
      ipfsHash: string
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createCertificate(string,pay)uint64': [ipfsHash: string, mbrPayment: AppMethodCallTransactionArgument]
    'claimCertificate(string)void': [ipfsHash: string]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type BlockTrempNftReturns = {
  'createCertificate(string,pay)uint64': bigint
  'claimCertificate(string)void': void
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the BlockTrempNft smart contract.
 */
export type BlockTrempNftTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createCertificate(string,pay)uint64' | 'createCertificate', {
      argsObj: BlockTrempNftArgs['obj']['createCertificate(string,pay)uint64']
      argsTuple: BlockTrempNftArgs['tuple']['createCertificate(string,pay)uint64']
      /**
       * The ID of the asset.
       */
      returns: BlockTrempNftReturns['createCertificate(string,pay)uint64']
    }>
    & Record<'claimCertificate(string)void' | 'claimCertificate', {
      argsObj: BlockTrempNftArgs['obj']['claimCertificate(string)void']
      argsTuple: BlockTrempNftArgs['tuple']['claimCertificate(string)void']
      returns: BlockTrempNftReturns['claimCertificate(string)void']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: BlockTrempNftArgs['obj']['createApplication()void']
      argsTuple: BlockTrempNftArgs['tuple']['createApplication()void']
      returns: BlockTrempNftReturns['createApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        certificateBoxes: Map<Uint8Array | string, Metadata>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BlockTrempNftSignatures = keyof BlockTrempNftTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BlockTrempNftNonVoidMethodSignatures = keyof BlockTrempNftTypes['methods'] extends infer T ? T extends keyof BlockTrempNftTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BlockTrempNft smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BlockTrempNftSignatures> = BlockTrempNftTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BlockTrempNft smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BlockTrempNftSignatures> = BlockTrempNftTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BlockTrempNftTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BlockTrempNftCreateCallParams =
  | Expand<CallParams<BlockTrempNftArgs['obj']['createApplication()void'] | BlockTrempNftArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BlockTrempNftArgs['obj']['createApplication()void'] | BlockTrempNftArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type BlockTrempNftDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BlockTrempNftCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BlockTrempNft smart contract
 */
export abstract class BlockTrempNftParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BlockTrempNftCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return BlockTrempNftParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BlockTrempNFT smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BlockTrempNftArgs['obj']['createApplication()void'] | BlockTrempNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createCertificate(string,pay)uint64 ABI method
   *
  * This method mints the certificate ASA for the user and
  returns the ASA ID.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createCertificate(params: CallParams<BlockTrempNftArgs['obj']['createCertificate(string,pay)uint64'] | BlockTrempNftArgs['tuple']['createCertificate(string,pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createCertificate(string,pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ipfsHash, params.args.mbrPayment],
    }
  }
  /**
   * Constructs a no op call for the claimCertificate(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimCertificate(params: CallParams<BlockTrempNftArgs['obj']['claimCertificate(string)void'] | BlockTrempNftArgs['tuple']['claimCertificate(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimCertificate(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ipfsHash],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BlockTrempNFT smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BlockTrempNftFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BlockTrempNftFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BlockTrempNftClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BlockTrempNftClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BlockTrempNFT smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BlockTrempNftDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BlockTrempNftParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BlockTrempNftCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BlockTrempNftClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BlockTrempNFT smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BlockTrempNftArgs['obj']['createApplication()void'] | BlockTrempNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(BlockTrempNftParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BlockTrempNFT smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BlockTrempNftArgs['obj']['createApplication()void'] | BlockTrempNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(BlockTrempNftParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BlockTrempNFT smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BlockTrempNftArgs['obj']['createApplication()void'] | BlockTrempNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(BlockTrempNftParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BlockTrempNftReturns['createApplication()void']) }, appClient: new BlockTrempNftClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BlockTrempNFT smart contract
 */
export class BlockTrempNftClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BlockTrempNftClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BlockTrempNft app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BlockTrempNftClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BlockTrempNftNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BlockTrempNftClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BlockTrempNftClient> {
    return new BlockTrempNftClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BlockTrempNftClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BlockTrempNftClient> {
    return new BlockTrempNftClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the BlockTrempNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BlockTrempNFT smart contract using the `createCertificate(string,pay)uint64` ABI method.
     *
    * This method mints the certificate ASA for the user and
    returns the ASA ID.

     *
     * @param params The params for the smart contract call
     * @returns The call params: The ID of the asset.
     */
    createCertificate: (params: CallParams<BlockTrempNftArgs['obj']['createCertificate(string,pay)uint64'] | BlockTrempNftArgs['tuple']['createCertificate(string,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BlockTrempNftParamsFactory.createCertificate(params))
    },

    /**
     * Makes a call to the BlockTrempNFT smart contract using the `claimCertificate(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimCertificate: (params: CallParams<BlockTrempNftArgs['obj']['claimCertificate(string)void'] | BlockTrempNftArgs['tuple']['claimCertificate(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BlockTrempNftParamsFactory.claimCertificate(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the BlockTrempNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BlockTrempNFT smart contract using the `createCertificate(string,pay)uint64` ABI method.
     *
    * This method mints the certificate ASA for the user and
    returns the ASA ID.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The ID of the asset.
     */
    createCertificate: (params: CallParams<BlockTrempNftArgs['obj']['createCertificate(string,pay)uint64'] | BlockTrempNftArgs['tuple']['createCertificate(string,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BlockTrempNftParamsFactory.createCertificate(params))
    },

    /**
     * Makes a call to the BlockTrempNFT smart contract using the `claimCertificate(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimCertificate: (params: CallParams<BlockTrempNftArgs['obj']['claimCertificate(string)void'] | BlockTrempNftArgs['tuple']['claimCertificate(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BlockTrempNftParamsFactory.claimCertificate(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the BlockTrempNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BlockTrempNFT smart contract using the `createCertificate(string,pay)uint64` ABI method.
     *
    * This method mints the certificate ASA for the user and
    returns the ASA ID.

     *
     * @param params The params for the smart contract call
     * @returns The call result: The ID of the asset.
     */
    createCertificate: async (params: CallParams<BlockTrempNftArgs['obj']['createCertificate(string,pay)uint64'] | BlockTrempNftArgs['tuple']['createCertificate(string,pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BlockTrempNftParamsFactory.createCertificate(params))
      return {...result, return: result.return as unknown as (undefined | BlockTrempNftReturns['createCertificate(string,pay)uint64'])}
    },

    /**
     * Makes a call to the BlockTrempNFT smart contract using the `claimCertificate(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimCertificate: async (params: CallParams<BlockTrempNftArgs['obj']['claimCertificate(string)void'] | BlockTrempNftArgs['tuple']['claimCertificate(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BlockTrempNftParamsFactory.claimCertificate(params))
      return {...result, return: result.return as unknown as (undefined | BlockTrempNftReturns['claimCertificate(string)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BlockTrempNftClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current BlockTrempNFT app
   */
  state = {
    /**
     * Methods to access box state for the current BlockTrempNFT app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the certificateBoxes map in box state
       */
      certificateBoxes: {
        /**
         * Get all current values of the certificateBoxes map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Metadata>> => { return (await this.appClient.state.box.getMap("certificateBoxes")) as Map<Uint8Array, Metadata> },
        /**
         * Get a current value of the certificateBoxes map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<Metadata | undefined> => { return await this.appClient.state.box.getMapValue("certificateBoxes", key) as Metadata | undefined },
      },
    },
  }

  public newGroup(): BlockTrempNftComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createCertificate(string,pay)uint64 method call against the BlockTrempNFT contract
       */
      createCertificate(params: CallParams<BlockTrempNftArgs['obj']['createCertificate(string,pay)uint64'] | BlockTrempNftArgs['tuple']['createCertificate(string,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createCertificate(params)))
        resultMappers.push((v) => client.decodeReturnValue('createCertificate(string,pay)uint64', v))
        return this
      },
      /**
       * Add a claimCertificate(string)void method call against the BlockTrempNFT contract
       */
      claimCertificate(params: CallParams<BlockTrempNftArgs['obj']['claimCertificate(string)void'] | BlockTrempNftArgs['tuple']['claimCertificate(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimCertificate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the BlockTrempNFT contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BlockTrempNftComposer
  }
}
export type BlockTrempNftComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createCertificate(string,pay)uint64 ABI method.
   *
  * This method mints the certificate ASA for the user and
  returns the ASA ID.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createCertificate(params?: CallParams<BlockTrempNftArgs['obj']['createCertificate(string,pay)uint64'] | BlockTrempNftArgs['tuple']['createCertificate(string,pay)uint64']>): BlockTrempNftComposer<[...TReturns, BlockTrempNftReturns['createCertificate(string,pay)uint64'] | undefined]>

  /**
   * Calls the claimCertificate(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimCertificate(params?: CallParams<BlockTrempNftArgs['obj']['claimCertificate(string)void'] | BlockTrempNftArgs['tuple']['claimCertificate(string)void']>): BlockTrempNftComposer<[...TReturns, BlockTrempNftReturns['claimCertificate(string)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the BlockTrempNFT smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BlockTrempNftComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BlockTrempNftComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BlockTrempNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BlockTrempNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BlockTrempNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BlockTrempNftComposerResults<TReturns>>
}
export type BlockTrempNftComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

