{
  "hints": {
    "createCertificate(string,pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimCertificate(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BlockTrempNFT",
    "desc": "",
    "methods": [
      {
        "name": "createCertificate",
        "desc": "This method mints the certificate ASA for the user and\nreturns the ASA ID.",
        "args": [
          {
            "name": "ipfsHash",
            "type": "string",
            "desc": "The hash for the certificate."
          },
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "Payment for the minimum balance requirement for the\nbox storage where a reference to the ASA would be persisted in."
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "The ID of the asset."
        }
      },
      {
        "name": "claimCertificate",
        "args": [
          {
            "name": "ipfsHash",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}